DFS(Depth-First Search): 
  깊이 우선 탐색이라고도 하며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘.
  스택 자료구조(혹은 재귀함수)를 이용하며 구체적인 동작 과정은 다음과 같다. 
  1. 탐색시작 노드를 삽입하고 방문처리한다. 
  2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문 처리한다. 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. 
  3. 더이상 2번의 과정을 수행할 수 없을 때까지 반복

# DFS 메서드 정의
def dfs(graph, v, visited):
  # visited는 방문처리 여부가 기록되어있는 리스트
  # 현재의 노드를 방문처리
  visited[v] = True
  print(v, end=' ')
  # 현재 노드와 연결된 다른 노드를 재귀적으로(하나씩 확인) 방문
  for i in graph[v]:
    if not visited[i]:
      dfs(graph, i, visited)

# 각노드가 연결된 정보를 표현 (2차원리스트), 그래프문제의 경우 노드의 번호가 1번부터 시작하는 경우가 많기 때문에 인덱스 0에 해당하는 부분을 비워두고 1번부터 시작
graph = [
  [],
  [2, 3, 8],
  [1, 7],
  [1, 4, 5],
  [3, 5],
  [3, 4],
  [7],
  [2, 6, 8],
  [1, 7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트) 
# 처음에는 모든 노드를 아직 방문하지 않은 것처럼 처리(false값)
# 인덱스 0을 사용하지 않게 하기 위해서, 하나 더 큰 크기(9)로 1차원 리스트를 초기화 
visited = [False] * 9

# 정의된 DFS 함수 호출
dfs(graph, 1, visited)

